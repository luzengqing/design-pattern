项目中真实的观察者模式
观察者模式也叫做发布/订阅模型（Publish/Subscribe）
为什么要说“真实”呢？因为我们刚刚讲的那些是太标准的模式了，在系统设计中会对观
察者模式进行改造或改装，主要在以下3个方面。
● 观察者和被观察者之间的消息沟通
被观察者状态改变会触发观察者的一个行为，同时会传递一个消息给观察者，这是正确
的，在实际中一般的做法是：观察者中的update方法接受两个参数，一个是被观察者，一个
是DTO（Data Transfer Object，据传输对象），DTO一般是一个纯洁的JavaBean,由被观察者
生成，由观察者消费。
当然，如果考虑到远程传输，一般消息是以XML格式传递。
● 观察者响应方式
我们这样来想一个问题，观察者是一个比较复杂的逻辑，它要接受被观察者传递过来的
信息，同时还要对他们进行逻辑处理，在一个观察者多个被观察者的情况下，性能就需要提
到日程上来考虑了，为什么呢？如果观察者来不及响应，被观察者的执行时间是不是也会被
拉长？那现在的问题就是：观察者如何快速响应？有两个办法：一是采用多线程技术，甭管
是被观察者启动线程还是观察者启动线程，都可以明显地提高系统性能，这也就是大家通常
所说的异步架构；二是缓存技术，甭管你谁来，我已经准备了足够的资源给你了，我保证快
速响应，这当然也是一种比较好方案，代价就是开发难度很大，而且压力测试要做的足够充
分，这种方案也就是大家说的同步架构。
● 被观察者尽量自己做主
这是什么意思呢？被观察者的状态改变是否一定要通知观察者呢？不一定吧，在设计的
时候要灵活考虑，否则会加重观察者的处理逻辑，一般是这样做的，对被观察者的业务逻辑
doSomething方法实现重载，如增加一个doSomething(boolean isNotifyObs)方法，决定是否通知
观察者，而不是在消息到达观察者时才判断是否要消费。