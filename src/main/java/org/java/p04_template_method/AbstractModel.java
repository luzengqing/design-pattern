package org.java.p04_template_method;

/**
 * Created by lzq on 2018/3/22.
 * 抽象模板
 */
public abstract class AbstractModel implements Model {

    /**
     * 模板方法模式
     * 封装不变部分，扩展可变部分： 把认为是不变部分的算法封装到父类（抽象类）实现，而可变部分的则可以通过子类继承来继续扩展。
     * 行为由父类控制，子类实现： 基本方法是由子类实现的，因此子类可以通过扩展的方式增加相应的功能，符合开闭原则。
     */

    /**
     * 使用场景：
     * 1.多个子类有公有的方法，并且逻辑基本相同时。
     * 2。重要、复杂的算法，可以把核心算法设计为模板方法，周边的相关细节功能则由各个子类实现。
     * 3.重构时，模板方法模式是一个经常使用的模式，把相同的代码抽取到父类中，然后通过钩子函数约束其行为。
     */



    /**
     * 抽象类完成了模板方法，按照固定的逻辑步骤
     * 而那些基本方法等待具体实现类去实现
     *
     * 一般模板方法都加上final关键字，不允许被覆写。
     */
    @Override
    public final void templateMethod() {

        //说些什么
        this.say();

        //再做些什么
        this.doSomething();

    }

}
